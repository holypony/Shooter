//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""3f61dfd4-51d2-4fb5-b43d-836138c462c6"",
            ""actions"": [
                {
                    ""name"": ""MoveStick"",
                    ""type"": ""Value"",
                    ""id"": ""5cc41e3b-3dd3-4fcf-a9b1-c48d32d969a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireButton"",
                    ""type"": ""Button"",
                    ""id"": ""f18bd0ff-7d96-45da-b310-e68ed5d38810"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimStick"",
                    ""type"": ""Value"",
                    ""id"": ""5d9b95ff-e3e2-43e3-9460-ddfb4b61dda8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ff5404b-e036-4a26-8634-57282720f200"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2539f675-0199-4431-b5c9-5929686fef52"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eca7471b-9587-4f1d-8435-7c08cd6a14e6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""409e3a69-0e5f-4e5e-99f5-d88ff753288e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_MoveStick = m_PlayerMap.FindAction("MoveStick", throwIfNotFound: true);
        m_PlayerMap_FireButton = m_PlayerMap.FindAction("FireButton", throwIfNotFound: true);
        m_PlayerMap_AimStick = m_PlayerMap.FindAction("AimStick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
    private readonly InputAction m_PlayerMap_MoveStick;
    private readonly InputAction m_PlayerMap_FireButton;
    private readonly InputAction m_PlayerMap_AimStick;
    public struct PlayerMapActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveStick => m_Wrapper.m_PlayerMap_MoveStick;
        public InputAction @FireButton => m_Wrapper.m_PlayerMap_FireButton;
        public InputAction @AimStick => m_Wrapper.m_PlayerMap_AimStick;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
            {
                @MoveStick.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMoveStick;
                @MoveStick.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMoveStick;
                @MoveStick.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMoveStick;
                @FireButton.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnFireButton;
                @FireButton.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnFireButton;
                @FireButton.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnFireButton;
                @AimStick.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnAimStick;
                @AimStick.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnAimStick;
                @AimStick.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnAimStick;
            }
            m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveStick.started += instance.OnMoveStick;
                @MoveStick.performed += instance.OnMoveStick;
                @MoveStick.canceled += instance.OnMoveStick;
                @FireButton.started += instance.OnFireButton;
                @FireButton.performed += instance.OnFireButton;
                @FireButton.canceled += instance.OnFireButton;
                @AimStick.started += instance.OnAimStick;
                @AimStick.performed += instance.OnAimStick;
                @AimStick.canceled += instance.OnAimStick;
            }
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
    public interface IPlayerMapActions
    {
        void OnMoveStick(InputAction.CallbackContext context);
        void OnFireButton(InputAction.CallbackContext context);
        void OnAimStick(InputAction.CallbackContext context);
    }
}
